group_by(cyl, gear) %>%
mutate(bla=sum(wt))
name <- c(rep("SW115", 5), rep("SW345", 5), rep("SW445", 5))
Value <- c(25,34,25,30,36,32,43,35,24,23,32,33,24,35,25)
rate <- c(rep(3, 5), rep(4, 5), rep(5, 5))
df <- data.frame(name, Value, rate)
df
aggregate(df[,2:3], list(df$name), mean )
aggregate(df[,2], list(df$name, df$rate), mean )
install.packages(c("boot", "class", "foreign", "KernSmooth", "MASS", "nlme", "nnet", "spatial"))
View(ucr)
Task 1: Visualise distance of all poviats from Suwalki
Task 2: Check how many neighbors have the counties (nts4 units, powiats) under criterion of neighbors within a radius of 70 km. Check out what changes were introduced in the matrix after make.symm.nb() command.
Task 3: For the contiguity matrix, draw a map with colors for the average weight of a neighbour
setwd("/Users/ewelinka/Desktop/Housing-Prices-Spatial-econometrics")
getwd()
readxl::read_excel("df_final.xlsx")
df_final <- readxl::read_excel("df_final.xlsx")
df_final <- readxl::read_excel("df_final_v2.xlsx")
summary(df_final)
df_final <- readxl::read_excel("df_final_v2.xlsx")
View(df_final)
metro$kabaty <- data.frame(lat = 52.1314124, lon = 21.065519)
metro <- data.frame(lat = 52.1314124, lon = 21.065519)
View(metro)
metro <- data.frame(station = "Kabaty",lat = 52.1314124, lon = 21.065519)
View(metro)
metro <- data.frame(station = c("Kabaty", "Natolin"),
lat = c(52.1314124, 52.1396902),
lon = c(21.065519, 21.0561986))
View(metro)
metro <- data.frame(station = c("Kabaty", "Natolin", "Imielin", "Stokłosy", "Ursynów", "Służew", "Wilanowska",
"Wierzbno", "Racławicka", "Pole_Mokotowskie", "Politechnika", "Centrum", "Świętokrzyska",
"Ratusz_Arsenał", "Dworzec_Gdański", "Plac_Wilsona", "Marymont", "Słodowiec", "Stare_Bielany",
"Wawrzyszew", "Młociny",
"Księcia_Janusza", "Młynów", "Płocka", "Rondo_Daszyńskiego", "Rondo_ONZ",
"Nowy_Świat", "CNK", "Stadion_Narodowy", "Dworzec_Wileński", "Szwedzka", "Targówek", "Trocka"),
lat = c(52.1314124, 52.1396902, 52.1500899, 52.1561292, 52.1613618, 52.1733019, 52.1811072,
52.1904197,52.1991004,52.2088425,52.2186505,52.2186492,52.2352732,52.2448043,52.2575656,
52.2688336,52.2717241,52.2759965,52.2801845,52.28323,52.2868791,
52.239035,52.2377768,52.2327241,52.2299872,52.2329508,52.2364112,52.2394039,52.2472444,
52.2540787,52.2570703,52.2694184,52.2738826),
lon = c(21.065519, 21.0561986, 21.0432985, 21.0338946, 21.0270013, 21.0264675, 21.0217164,
21.0145773,21.0122759,21.0054488,21.0114257,20.9960565,21.0063005,21.0017348,20.9935019,
20.9829901,20.9711893,20.9589334,20.9508653,20.9408017, 20.9341498,
20.9425829,20.9587245,20.9643946,20.982226,20.9976487,21.0146957,21.0301882,21.0424888,
21.0352468,21.0251564,21.0507258,21.0510128))
View(metro)
metro <- data.frame(station = c("Kabaty", "Natolin", "Imielin", "Stokłosy", "Ursynów", "Służew", "Wilanowska",
"Wierzbno", "Racławicka", "Pole_Mokotowskie", "Politechnika", "Centrum", "Świętokrzyska",
"Ratusz_Arsenał", "Dworzec_Gdański", "Plac_Wilsona", "Marymont", "Słodowiec", "Stare_Bielany",
"Wawrzyszew", "Młociny",
"Księcia_Janusza", "Młynów", "Płocka", "Rondo_Daszyńskiego", "Rondo_ONZ",
"Nowy_Świat", "CNK", "Stadion_Narodowy", "Dworzec_Wileński", "Szwedzka", "Targówek", "Trocka"),
lat = c(52.1314124, 52.1396902, 52.1500899, 52.1561292, 52.1613618, 52.1733019, 52.1811072,
52.1904197,52.1991004,52.2088425,52.2166845,52.216679,52.2352732,52.2448043,52.2575656,
52.2688336,52.2717241,52.2759965,52.2801845,52.28323,52.2868791,
52.239035,52.2377768,52.2327241,52.2299872,52.2329508,52.2364112,52.2394039,52.2472444,
52.2540787,52.2570703,52.2694184,52.2738826),
lon = c(21.065519, 21.0561986, 21.0432985, 21.0338946, 21.0270013, 21.0264675, 21.0217164,
21.0145773,21.0122759,21.0054488,21.0165821,20.9902102,21.0063005,21.0017348,20.9935019,
20.9829901,20.9711893,20.9589334,20.9508653,20.9408017, 20.9341498,
20.9425829,20.9587245,20.9643946,20.982226,20.9976487,21.0146957,21.0301882,21.0424888,
21.0352468,21.0251564,21.0507258,21.0510128))
View(df_final)
install.packages("geosphere")
library(geosphere)
c(df_final$Lat, df_final$Lon)
as.list(df_final$Lat, df_final$Lon)
as.list(c(df_final$Lat, df_final$Lon))
# odległość w linii prostej w metrach
distm(c(52.1314124,21.065519), c(52.1396902,21.0561986), fun = distHaversine)
# odległość w linii prostej w metrach
distm(c(52.1314124,21.065519), c(52.1396902,21.0561986), fun = distHaversine)/100
# odległość w linii prostej w metrach
distm(c(52.1314124,21.065519), c(52.1396902,21.0561986), fun = distHaversine)/1000
df_final %>%
mutate(lat_lon = list(Lat, Lon))
library(dplyr)
df_final %>%
mutate(lat_lon = list(Lat, Lon))
df_final %>%
mutate(lat_lon = list(map(Lat, Lon)))
library(tidyverse)
library(sf)
st_sfc(df_final$Lat, df_final$Lon)
st_geometry(c(52.1314124,21.065519))
as(df_final$Lat, Class = "Spatial")
st_point(c(52.1314124,21.065519))
geometrycollection(list(52.1314124,21.065519))
st_geometrycollection(list(52.1314124,21.065519))
st_geometrycollection(list(st_point(52.1314124,21.065519)))
st_geometrycollection(list(st_point(c(52.1314124,21.065519))))
st_geometry(list(st_point(c(52.1314124,21.065519))))
st_sfc(st_point(metro$lat), st_point(metro$lon))
geom = st_sfc(st_point(metro$lat[1]), st_point(metro$lon[1]))
st_sfc(st_point(metro$lat[1]), st_point(metro$lon[1]))
st_point(metro$lat[1])
st_sfc(st_point(c(metro$lat, metro$lon)))
geom = st_sfc(st_point(c(metro$lat[1], metro$lon[1])))
st_sfc(st_point(c(metro$lat[1], metro$lon[1])))
st_sfc(st_point(c(metro$lat, metro$lon)))
st_sfc(st_point(list(metro$lat, metro$lon)))
st_sfc(st_point(c(metro$lat, metro$lon)))
st_sfc(st_point(c(metro$lat[1], metro$lon[1])))
geom = st_sfc(st_point(c(metro$lat[1], metro$lon[1])))
st_crs(geom) <- 4326
geom
View(geom)
geom1 = st_sfc(st_point(c(metro$lat[2], metro$lon[2])))
# odległość w linii prostej w metrach
distm(geom, geom1, fun = distHaversine)/1000
distHaversine(df_final[,1:2], metro[,2:3])
distHaversine(c(52.1314124,21.065519), c(53, 20.987))
distHaversine(c(21.065519,52.1314124), c(20.987,53))
distHaversine(df_final[,15:16], metro[,2:3])
distHaversine(df_final[,15:16], metro[1,2:3])
dist <- distHaversine(df_final[,15:16], metro[1,2:3])
dist_Kabaty <- distHaversine(df_final[,15:16], metro[1,2:3])/1000
dist_Natolin <- distHaversine(df_final[,15:16], metro[2,2:3])/1000
min(dist_Kabaty)
min(dist_Natolin)
for (i in length(metro)){
distHaversine(df_final[,15:16], metro[i,2:3])/1000
}
length(metro)
dim(metro)
dim(metro)[1]
for (i in dim(metro)[1]){
distHaversine(df_final[,15:16], metro[i,2:3])/1000
}
print(distHaversine(df_final[,15:16], metro[i,2:3])/1000)
for (i in dim(metro)[1]){
a<-distHaversine(df_final[,15:16], metro[i,2:3])/1000
}
dist = c()
for (i in dim(metro)[1]){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist <- cbind(dist, test)
}
View(dist)
as.numeric(dim(metro)[1])
dist = c()
for (i in as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist <- cbind(dist, test)
}
View(dist)
dist = data.frame()
for (i in as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist <- cbind(dist, test)
}
dist = data.frame()
for (i in as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist[,paste0("station_", i)] <- test
}
dist = df_final[,15:16]
for (i in as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist[,paste0("station_", i)] <- test
}
View(dist)
dist = df_final[,15:16]
for (i in as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist[,paste0("station_", i)] <- test
dist <- cbind(dist, dist)
}
View(dist)
dist = df_final[,15:16]
dist = list()
for (i in as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
test$i <- i
dist[[i]] <- test
}
View(dist)
dist = list()
for (i in as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist[[i]] <- test
}
View(dist)
dist[[1]]
dist[[33]]
dist = list()
for (i in as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist[[i]] <- test
}
big_data = do.call(cbind, dist)
View(big_data)
as.numeric(dim(metro)[1])
dist = list()
i=1
for (i in as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist[[i]] <- test
i=i+1
}
View(dist)
dist = list()
for (i in 1:as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist[[i]] <- test
}
View(dist)
dist_all = do.call(cbind, dist)
View(dist_all)
View(dist_all)
apply(dist_all, 1, FUN=min)
dist_all$min <- apply(dist_all, 1, FUN=min)
apply(dist_all, 1, FUN=min)
dist_all = do.call(cbind, dist)
apply(dist_all, 1, FUN=min)
as.data.frame(apply(dist_all, 1, FUN=min))
dist_all$min <- as.data.frame(apply(dist_all, 1, FUN=min))
View(dist_all)
dist_all = do.call(cbind, dist)
apply(dist_all, 1, FUN=min)
dist_all <- as.data.frame(dist_all)
apply(dist_all, 1, FUN=min)
dist_all$min <- apply(dist_all, 1, FUN=min)
View(dist_all)
metro[1,2:3]
metro[i,1]
dist = list()
for (i in 1:as.numeric(dim(metro)[1])){
test <- distHaversine(df_final[,15:16], metro[i,2:3])/1000
dist[[metro[i,1]]] <- test
}
View(dist)
dist_all = do.call(cbind, dist)
dist_all <- as.data.frame(dist_all)
colnames(dist_all)[min.col(dist_all,ties.method="first")]
apply(dist_all, 1, FUN=min)
dist_all$min <- apply(dist_all, 1, FUN=min)
dist_all$Distance_to_subway_in_km <- apply(dist_all, 1, FUN=min)
cbind(df_final, dist_all$Distance_to_subway_in_km)
df_final <- cbind(df_final, dist_all$Distance_to_subway_in_km)
colnames(df_final)[26]
colnames(df_final)[26] <- "Distance_to_subway_in_km"
library("xlsx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
write.xlsx(df_final, file = "df_final_v3.xlsx")
knitr::opts_chunk$set(echo = TRUE)
df_final <- readxl::read_excel("df_final_v3.xlsx")
View(df_final)
df_final$...1 <- NULL
colnames(df_final)
variables <- matrix(c(
"District", "The district",
"Total price", "Total price of the property in PLN",
"Days from initial announcement", "Days from initial announcement",
"Czynsz", "Rent",
"Forma własności", "Form of ownership",
"Piętro", "Floor",
"Rodzaj zabudowy", "Type of construction",
"Stan wykończenia", "Finishing condition",
"Liczba pięter", "Number of floors in the building",
"Rynek", "Property market",
"Powierzchnia", "Are of the property",
"Liczba pokoi", "Number of rooms",
"Rok budowy", "Year built ",
"Ogrzewanie","Heating type",
"Lat","Latitude of the property",
"Lon","Longitude of the property",
"Distance_to_PKIN_in_km","Distance to the center (indicated by the PKiN building) in km",
"Time_to_PKIN_in_minutes","Time to the center (indicated by the PKiN building) in minutes", # stopami czy jak?
"Distance_to_subway_in_km","Distance to the nearest subway in km",
"Price_per_sqm","Price per square metre",
"Population_density","Population density", # of what?
"Vistula_side(1_for_west_0_for_east)","Which side of the Vistula the property is located (1=west, 0=east)",
"Life_quality","Life quality within a district",
"Family_friendliness","Family friendliness within a district",
"Single_people_friendliness","Single people friendliness within a district",
"Senior_people_friendliness","Senior people friendliness within a district"
),
ncol=2,byrow=TRUE)
colnames(variables) <- c("Variable Name", "Variable description")
library(knitr)
kable(variables)
summary(df_final)
apply(df_final, 2, is.na)
sapply(df_final, function(x) sum(is.na(x)))
sapply(df_final, function(x) sum(is.na(x))) %>% as_tibble()
sapply(df_final, function(x) sum(is.na(x))) %>% as_data_frame()
sapply(df_final, function(x) sum(is.na(x)))
sapply(df_final, function(x) sum(is.na(x))/dim(df_final)[1])
sapply(df_final, function(x) sum(is.na(x))/dim(df_final)[1]*100)
colMeans(is.na(df_final))
lm(Czynsz ~ District + Total_price + Powierzchnia + Price_per_sqm + `Liczba pokoi` + Distance_to_PKIN_in_km + Distance_to_subway_in_km)
lm(Czynsz ~ District + Total_price + Powierzchnia + Price_per_sqm + `Liczba pokoi` + Distance_to_PKIN_in_km + Distance_to_subway_in_km, data = df_final)
summary(df_final$Days_from_initial_announcement)
df_status(df_final$Days_from_initial_announcement)
head(df_final$Days_from_initial_announcement)
df_final$Days_from_initial_announcement[1:10]
View(df_final)
nums <- sapply(df_final, is.numeric)
nums <- sapply(df_final, is.numeric)
df_final[,nums]
nums <- sapply(df_final, is.numeric)
head(df_final[,nums])
nums <- sapply(df_final, is.numeric)
df_final_nums <- df_final[,nums]
head(df_final_nums)
oth <- which(!nums)
df_final_oth <- df_final[,oth]
head(df_final_oth)
cols.f <- names(df_final_oth)
cols.f <- names(df_final_oth)
for (i in cols.f) {
df_final[,i] <- as.factor(df_final[,i])
}
View(df_final)
cols.f <- names(df_final_oth)
for (i in cols.f) {
df_final[,i] <- as.factor(as.character(df_final[,i]))
}
df_final <- readxl::read_excel("df_final_v3.xlsx")
df_final$...1 <- NULL
df_final <- readxl::read_excel("df_final_v3.xlsx")
df_final$...1 <- NULL
df_final <- readxl::read_excel("df_final_v3.xlsx")
df_final$...1 <- NULL
df_final <- readxl::read_excel("df_final_v3.xlsx")
df_final$...1 <- NULL
variables <- matrix(c(
"District", "The district",
"Total price", "Total price of the property in PLN",
"Days from initial announcement", "Days from initial announcement",
"Czynsz", "Rent",
"Forma własności", "Form of ownership",
"Piętro", "Floor",
"Rodzaj zabudowy", "Type of construction",
"Stan wykończenia", "Finishing condition",
"Liczba pięter", "Number of floors in the building",
"Rynek", "Property market",
"Powierzchnia", "Are of the property",
"Liczba pokoi", "Number of rooms",
"Rok budowy", "Year built ",
"Ogrzewanie","Heating type",
"Lat","Latitude of the property",
"Lon","Longitude of the property",
"Distance_to_PKIN_in_km","Distance to the center (indicated by the PKiN building) in km",
"Time_to_PKIN_in_minutes","Time to the center (indicated by the PKiN building) in minutes", # stopami czy jak?
"Distance_to_subway_in_km","Distance to the nearest subway in km",
"Price_per_sqm","Price per square metre",
"Population_density","Population density", # of what?
"Vistula_side(1_for_west_0_for_east)","Which side of the Vistula the property is located (1=West, 0=East)",
"Life_quality","Life quality within a district",
"Family_friendliness","Family friendliness within a district",
"Single_people_friendliness","Single people friendliness within a district",
"Senior_people_friendliness","Senior people friendliness within a district"
),
ncol=2,byrow=TRUE)
colnames(variables) <- c("Variable Name", "Variable description")
library(knitr)
kable(variables)
cols.f <- names(df_final_oth)
nums <- sapply(df_final, is.numeric)
df_final_nums <- df_final[,nums]
head(df_final_nums)
oth <- which(!nums)
df_final_oth <- df_final[,oth]
head(df_final_oth)
cols.f <- names(df_final_oth)
for (i in cols.f) {
df_final[,i] <- as.factor(as.character(df_final[,i]))
}
View(df_final)
head(df_final)
df_final <- readxl::read_excel("df_final_v3.xlsx")
df_final$...1 <- NULL
View(df_final)
variables <- matrix(c(
"District", "The district",
"Total price", "Total price of the property in PLN",
"Days from initial announcement", "Days from initial announcement",
"Czynsz", "Rent",
"Forma własności", "Form of ownership",
"Piętro", "Floor",
"Rodzaj zabudowy", "Type of construction",
"Stan wykończenia", "Finishing condition",
"Liczba pięter", "Number of floors in the building",
"Rynek", "Property market",
"Powierzchnia", "Are of the property",
"Liczba pokoi", "Number of rooms",
"Rok budowy", "Year built ",
"Ogrzewanie","Heating type",
"Lat","Latitude of the property",
"Lon","Longitude of the property",
"Distance_to_PKIN_in_km","Distance to the center (indicated by the PKiN building) in km",
"Time_to_PKIN_in_minutes","Time to the center (indicated by the PKiN building) in minutes", # stopami czy jak?
"Distance_to_subway_in_km","Distance to the nearest subway in km",
"Price_per_sqm","Price per square metre",
"Population_density","Population density", # of what?
"Vistula_side(1_for_west_0_for_east)","Which side of the Vistula the property is located (1=West, 0=East)",
"Life_quality","Life quality within a district",
"Family_friendliness","Family friendliness within a district",
"Single_people_friendliness","Single people friendliness within a district",
"Senior_people_friendliness","Senior people friendliness within a district"
),
ncol=2,byrow=TRUE)
colnames(variables) <- c("Variable Name", "Variable description")
library(knitr)
kable(variables)
nums <- sapply(df_final, is.numeric)
df_final_nums <- df_final[,nums]
head(df_final_nums)
oth <- which(!nums)
df_final_oth <- df_final[,oth]
head(df_final_oth)
cols.f <- names(df_final_oth)
for (i in cols.f) {
df_final[,i] <- as.factor(df_final[,i])
}
View(df_final)
df_final <- readxl::read_excel("df_final_v3.xlsx")
df_final$...1 <- NULL
as.factor(df_final$District)
df_final$District <- as.factor(df_final$District)
View(df_final)
cols.f
names(df_final_oth
names(df_final_oth)
names(df_final_oth)
cols.f <- names(df_final_oth)
for (i in cols.f) {
df_final[,i] <- as.factor(df_final[,i])
}
df_final <- readxl::read_excel("df_final_v3.xlsx")
df_final$...1 <- NULL
cols.f <- names(df_final_oth)
for (i in cols.f) {
df_final[,i] <- as.factor(df_final[,i])
}
cols.f
df_final$District <- as.factor(df_final$District)
df_final$Days_from_initial_announcement <- as.factor(df_final$Days_from_initial_announcement)
df_final$`Forma własności` <- as.factor(df_final$`Forma własności`)
df_final$Piętro <- as.factor(df_final$Piętro)
df_final$`Rodzaj zabudowy` <- as.factor(df_final$`Rodzaj zabudowy`)
df_final$`Stan wykończenia` <- as.factor(df_final$`Stan wykończenia`)
df_final$Rynek <- as.factor(df_final$Rynek)
df_final$`Liczba pokoi` <- as.factor(df_final$`Liczba pokoi`)
df_final$Ogrzewanie <- as.factor(df_final$Ogrzewanie)
View(df_final)
df_final <- readxl::read_excel("df_final_v3.xlsx")
df_final$...1 <- NULL
df_final$District <- as.factor(df_final$District)
df_final$Days_from_initial_announcement <- as.factor(df_final$Days_from_initial_announcement)
df_final$`Forma własności` <- as.factor(df_final$`Forma własności`)
df_final$Piętro <- as.factor(df_final$Piętro)
df_final$`Rodzaj zabudowy` <- as.factor(df_final$`Rodzaj zabudowy`)
df_final$`Stan wykończenia` <- as.factor(df_final$`Stan wykończenia`)
df_final$Rynek <- as.factor(df_final$Rynek)
df_final$`Liczba pokoi` <- as.factor(df_final$`Liczba pokoi`)
df_final$Ogrzewanie <- as.factor(df_final$Ogrzewanie)
View(df_final)
colnames(df_final_oth)
levels(df_final$District)
levels(df_final$Days_from_initial_announcement)
levels(df_final$`Forma własności`)
remotes::install_github("mbojan/mapoland")
library(rgdal)
my_spdf <- readOGR(
dsn=dzielnice_Warszawy.shp,
layer="dzielnice_Warszawy-0.3",
verbose=FALSE
)
library(rgdal)
my_spdf <- readOGR(
dsn="shapefile/dzielnice_Warszawy.shp",
layer="dzielnice_Warszawy-0.3",
verbose=FALSE
)
library(rgdal)
my_spdf <- readOGR(
dsn="shapefile/dzielnice_Warszawy.shp",
layer="dzielnice_Warszawy",
verbose=FALSE
)
head(my_spdf@data)
library(broom)
spdf_fortified <- tidy(my_spdf, region = "NAME")
spdf_fortified <- tidy(my_spdf, region = "nazwa_dzie")
my_spdf
View(my_spdf)
?tidy
plot(my_spdf, col="#f2f2f2", bg="skyblue", lwd=0.25, border=0 )
plot(my_spdf, col="#f2f2f2", bg="skyblue", lwd=0.25, border=0.3)
tidy(my_spdf, region = "NAME")
ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group)) +
theme_minimal()
# Plot it
library(ggplot2)
ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group)) +
theme_minimal()
# 'fortify' the data to get a dataframe format required by ggplot2
library(broom)
spdf_fortified <- tidy(my_spdf, region = "NAME")
library(ggplot2)
ggplot() +
geom_polygon(data = my_spdf, aes( x = long, y = lat, group = group))
my_spdf
